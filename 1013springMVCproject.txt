spring mvc project
1. Spring project 종류
1)spring legacy project
=>이전에 많이 사용하던 방식으로 mvc 패턴을 적용한 형태의 프로젝트를 미리 만들어두고 이를 다운로드 받아서 사용하는 구조
전장정부프레임워크나 애니 프레임워크 등에서 데이터베이스 연동 샘플을 다운로드해주기도 함
=>설정해야 할 내용이 많아서 프로그램을 개발하는 입장에서는 이해하기가 어려움
=>웹 프로젝트의 경우 별도의 was(web container, web application server)를 설치해야 실행 가능

=>이클립스의 경우 sts3 플러그인을 설치하거나 sts3버전을 사용해야 함 (sts4에는 legacy project가 없음)

2)spring starter project(spring boot)
=>기본적인 설정 내용을 전부 해놓고 이를 숨겨둠
=>별도의 web container를 설치하지 않아도 웹 프로젝트 실행 가능
=>최근에는 이 방식을 선호

front controller : 대문
page controller : 방문

@controller, repository, service 스프링이 만들어주는 인스턴스인 bean 생성해줌

11
handlermapping 자동으로 만들어줌
viewresolver, view : jsp 출력 아닐 때만 수정

12
서블릿 클래스 직접 생성하지 않고 web.xml에 작성..

이 url패턴으로 오면 이 서블릿 네임이 처리하겠다..

pojo 다른 프레임워크의 클래스를 상속하지 않은 클래스 - 스프링의 장점
자바는 하위 버전을 버리지 않음.. 낮은 버전도 다 실행됨

컨트롤러 리턴 모델앤뷰 -> 스트링 ㅊㅊ

18
공통위치 빼면 자동 webapp으로 설정됨
네이밍, 모듈화 중요..!!

2. spring mvc project 생성
file - new 한 후 others를 눌러서 spring legacy project를 찾아서  spring mvc project 선택

이 패키지 안에 만들어야 스피링 적용됨 - 기본패키지 이름 설정
com.adamsoft.item
localhost:8080/item (기본경로)
http://localhost:8080/item/
프로젝트 이름과 기본패키지 이름을 작성하는데 패키지 이름의 3번째는 contextRoot(프로토콜://도메인:포트번호/이자리)가 됨

=>maven 기반의 spring3을 사용하는 웹프로젝트가 생성 됨

3.java build tool
1)maven 
pom.xml 기반한 빌드 도구
=>ant의 단점을 보완한 빌드 도구

2)gradle
=>build.gradle에 기반한 빌드 도구
=>ant와 maven의 장점을 혼합한 빌드 도구
=>android studio의 기본 빌드 도구이며 최근에는 maven보다 gradle을 선호

3)jenkins
=>지속적인 배포(CI/CD)통합/배포 편리하게 해주는 빌드 도구 - 클라우드 환경에서 필수

4.디렉토리 구조
=>src/java : 컴파일 되어야 하는 자바코드가 위치해야 하는 디렉토리
=>src/resource : 컴파일되지 않아도 되는 파일들이 위치

=>src/test/java : 테스트를 위해서 컴파일 되어야 하는 자바코드가 위치해야 하는 디렉토리
=>src/test/resource : 테스트르 ㄹ위해서 컴파일되지 않아도 되는 파일들이 위치

test 디렉토리의 내용은 배포될 때는 자동으로 삭제됨

=>src/main/webapp/WEB-INF/classes : 컴파일 된 클래스들이 위치해야 하는 디렉토리
=>src/main/webapp/WEB-INF/spring : 스프링 설정 파일의 기본 위치 - 변경 가능
	root-context.xml : 모든 요청에서 사용하는 설정파일 (servlet-context.xml 보다 먼저)
	servlet-context.xml : web.xml에서 등록된 url만 사용하는 설정 파일

=>src/main/webapp/WEB-INF/views : 기본 부가 위치하는 디렉토리 - 위치 변경 가능
=>src/main/webapp/WEB-INF/web.xml : 웹 프로젝트 설정 파일

스프링 부트는 이걸 다 숨겨버림.. (자동 생성이나 수정 어려움)

5.pom.xml파일의 의존성 설정(외부 라이브러리의 의존성)
=>repositories 설정이 없으면 dependencies에 설정된 라이브러리들을 자신의 컴퓨터의 .m2라는 디렉토리에서 찾고 이 디렉토리에 없으면 중앙 저장소에서
찾아서 다운로드해서 .m2에 저장하고 프로젝트의 build path에 추가해서 사용
=>repositories 설정이 있으면 .m2에 없는 경우 repositories에 설정된 곳에 가서 먼저 찾고 없으면 중앙 저장소에서 찾음
repositories를 만져야 하는 경우는 오라클을 사용하는 경우

6.pom.xml파일의 기본 설정 변경
=>자바 버전 변경 : <java-version>1.8</java-version>
=>스프링 버전 변경 : <org.springframework-version>5.0.7.RELEASE</org.springframework-version>
숫자만 바꾸면 됨..

=>자바 테스트 라이브러리인 JUnit의 번전을 수정
<dependency>
	<groupId>junit</groupId>
	<artifactId>junit</artifactId>
	<version>4.12</version>
	<scope>test</scope>
</dependency>        

=>서블릿 버전 변경 ..다운로드 받아야하기 때문에 scope지워줌.. 저장하면 다운로드 받기 때문에 글자 틀렸는지 알 수 있음
<dependency>
	<groupId>javax.servlet</groupId>
	<artifactId>javax.servlet-api</artifactId>
	<version>3.1.0</version>
</dependency>

=>자바 컴파일러 버전을 변경
<source>1.8</source>
<target>1.8</target>

7.lombok
=>데이터를 표현하는 클래스(vo, dto, entity)를 만들 때 속성 이외의 필수 메서드를 쉽게 구현하기 위한 라이브러리
1)설치
=>https://www.projectlombok.org/download 에서 jar 파일을 다운로드
=>터미널에서 java -jar 다운받은 파일 경로 (설치 파일 경로는 cmd 창에 파일을 drag and drop 하면 됨)
=>lombok을 사용할 ide(exe)를 선택하고 ide를 재시작

2)사용 가능한 어노테이션
@NoAfgsConstructor : 매개변수가 없는 default 생성자 생성
@AllArgsConstructor : 모든 속성을 매개변수로 받는 생성자 생성
@RequiredArgsConstructor : final이나 @NotNull이 붙은 필드를 매개변수로 받는 생성자를 생성

@Builder : 인스턴스 생성과 속성의 값을 편리하게 설정하도록 해주는 builder 패턴을 적용해주는 어노테이션
클래스이름.builder().속성이름(값) ... build();
이렇게 인스턴스의 값을 채움..

@Getter : 속성의 get 메서드 생성
@Setter : 속성의 set 메서드 생성

@ToString : 모든 속성의 값을 묶어서 하나의 문자열로 리턴하는 toString 메서드 생성
출력하는 메서드에 인스턴스르 ㄹ대입하면 toString 메서드가 호출되서 그 결과를 출력 함 

@Data : getter, setter, RequiredArgsConstructor, toString, EqualsAndHashCode를 한꺼번에 적용

@NotNull : null 체크
@Value : immutable 클래스(변경이 불가능한 클래스) 생성 - 설정 내용을 호출해서 값을 대입.. 고정된 값을 설정파일에 넣고 불러들이기 위해서 사용
@EqualsAndHashCode : equals메서드와 hashcode 메서드를 생성
@Log : 로그 속성을 자동으로 추가해서 로그 내용을 기록하기 위한 어노테이션

8. pom.xml에 spring test 라이브러리와 lombok라이브러리의 의존성을 추가

저장 후 Maven Dependencies에서 확인 가능
<!-- 스프링 테스트 라이브러리 -->
<dependency>
	<groupId>org.springframework</groupId>
	<artifactId>spring-test</artifactId>
	<version>${org.springframework-version}</version>
</dependency>
<!-- lombok -->
<dependency>
	<groupId>org.projectlombok</groupId>
	<artifactId>lombok</artifactId>
	<version>1.18.12</version>	-- 다운받은 버젼과 맞춰주는게 좋음
	<scope>provided</scope>
</dependency>

9. contextroot를 /로 변경
1) 프로젝트의 properties를 변경
=>프로젝트 선택 후 우클릭 후 properties 선택 후 web project settings 에서 context root를 /로 변경

2)Servers 디렉토리의 server.xml파일의 context 태그의 path를 /로 변경 (/item -> /) http://localhost:8080/로 접속

10. 파일 출력 실습 - 시작 파일 교체
=>home.jsp내용을 수정해도 되지만 삭제하고 다시 설정해도 됨
webapp 디렉토리에 index.jsp파일을 만들면 이 파일이 시작파일이 됨
web.xml파일의 설정 때문에(프로젝트에 없으면 Servers 디렉토리의 web.xml).. 설정의 우선권 가짐.. controller가 짐..
<welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
</welcome-file-list>

jsp는 서버가 먼저 해석 작업 하고 출력
html은 그냥 클라이언트로 바로 감 - 처리 속도 빠르지만 자바 코드 못 씀..
보통은 먼저 다 jsp로 만들고 html로 나중에 바꾸는 형태..

1)webapp 디렉토리에 index.jsp파일을 만들고 작성한 후 실행

2)hello 요청 처리를 위한 코드를 작성
=>별도의 controller를 만들어서 처리해도 되고 제공되는 HomeController를 수정해도 됨
=>src/main/java에 가면 제공되는 homecontroller에 작성

=>/itemmvc/src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml 확인
=>web-inf/views 에 jsp 파일 생성

views 안에 디렉토리 member , board ... 등 생성해서 그 안에 jsp 꽂아넣음..

이 세팅 과정 숨긴게 스프링부트..
세팅 부분 제외하면 스프링과 스프링부터의 차이는 없음..

11.DispatcherServlet
1)Controller
=>FrontController : 모든 요청을 받아서 처리하는 Controller

=>PageController : 특정한 url을 받아서 처리하는 Controller

=>대부분은 둘 다 구성해서 전체적인 제어는 FrontController에서 하고 세부적인 제어를 PageController를 이용해서 구현

2)DispatcherServlet
=>Spring에서 FrontController역할을 수행하는 객체
=>web.xml 파일에 이를 설정이 작성되어 있으며 수정이 가능

3)url pattern
=> /* : 모든 요청을 처리
=> / : .jsp를 제외한 모든 요청을 처리
=> /디렉토리/* : 디렉토리가 포함된 모든 요청을 처리
=> *.확장자 : 확장자로 끝나는 모든 요청을 처리
=> /경로명 : 경로에 해당하는 요청을 처리

4) 주의할 점
디렉토리 패턴과 확장자 패턴(.do)은 동시에 사용할 수 없음
예전에는 확장자 패턴을 많이 사용했는데 최근에는 디렉토리 패턴을 많이 사용
=> / 나 /*을 사용 시 .css나 .js도 Controller가 처리하려고 해서 404에러가 발생 할 수 있는데
Controller가 처리하지 못하는 요청은 Web Container가 처리하도록 Dispatcher-Servlet에 <mvc:default-servlet-handler>를 추가해 주어야 함

5)파라미터 인코딩 설정
=>get 방식의 파라미터는 web container가 처리 (톰갯이 처리)
최근의 web container들은 대부분 utf-8을 처리할 수 있도록 설정되어 있기 때문에 대부분 인코딩을 설정하지 않음
=>post방식은 애플리케이션에서 직접 처리해야 함
Spring Legacy Project에서는 web.xml파일에 파라미터 인코딩을 위한 필터 클래스를 등록해야 함 - 무조건 해야 함 (스프링 부트에서는 안해도 됨)
ppt 40p .. 외우지 말고 붙여 넣자..
<filter>
	<filter-name>encodingFilter</filter-name>
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	<init-param>
		<param-name>encoding</param-name>
		<param-value>UTF-8</param-value>
	</init-param>
</filter>

<filter-mapping>
	<filter-name>encodingFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>

12.PageController
=>클라이언트의 요청을 받아서 필요한 로직을 호출하고 출력할 뷰를 설정하는 클래스
1)생성 방법
=>controller인터페이스르 ㄹimplements해서 생성
=>@Controller나 @RestController어노테이션을 이용해서 생성

2)클래스에 작성하는 어노테이션
=>@Log4j : log라는 객체를 생성해서 제공해주는데 이 객체를 이용해서 로그를 출력 가능
system.out.print 계열의 메서드를 가지고 로그를 출력 가능하나 이 경우는 개발 끝나면 모두 삭제해야 함
하지만 log를 이용해 출력한 내용은 배포 시 모두 제거가 됨
private static final Logger logger = LoggerFactory.getLogger(PageController.class);
logger.info("num"+num) 사용 ㅊㅊ, info는 검정글씨 error는 빨간글씨

=>@RequestMapping : 클래스 위에 작성 시 모든 요청 처리 메서드의 url 앞에 이 url이 추가됨

3)요청 처리 메서드의 기본적인 형태
@RequestMapping(url만 작성하기도 하고 url과 method를 작성)
public 리턴타입 이름(매개변수 나열){
	필요한 로직을 호출
}

=>hello 라는 요청 처리하고자 하는 메서드
@RequestMapping("hello")

->hello를 post방식으로 요청 시에만 처리하는 메서드
@RequestMapping(value="hello", method=RequestMethod.POST)

=>여러개의 url을 처리 경우 value={"url", "url"...}

4)@PathVariable
=>요청 경로의 일부분을 파라미터로 사용하고자할 때 사용하는 어노테이션 (파라미터가 하나일 때)
=> 이 경우는 아래처럼 처리
http://host/member/10 : 10부분을 파라미터로 사용
https://ggangpae1.tistory.com/286

@RequestMapping("https://ggangpae1.tistory.com/{num}")
public String process(@PathVariable int num){
	//num이 286이 됨
}
=>자료형은 적절하게 형 변환이 되서 대입됨

5)현재 프로젝트에서 링크의 마지막 부분을 파라미터로 만들어서 결과 페이지에 파라미터를 출력하기
=>index.jsp에 링크 추가
<a href="blog/1000">URL 파라미터</a><br/>

=> 기본 패키지 안에 요청을 처리할 controller클래스 만들고 위의 요청을 처리할 메서드를 작성 : controller.PageController
(컨트롤러들 담을 패키지 이름 com.adamsoft.item.controller)

=>web-inf/views 디렉토리에 blog.jsp파일을 만들고 확인

6)파라미터 처리
=>parameter : 클라이언트가 서버에게 전달하는 데이터
=>web에서는 get방식과 post방식으로 나눔
get 방식은 url에 ?를 추가하고 이름=값의 형태로 붙여서 전송하는 방식
여러개를 전송 시 이름=값 뒤에 &를 추가하고 작성하면 됨
전송이 지연되는 경우 자동 재전송 기능은 있지만 파라미터 길에에 제한이 있음(255자)
값이 url에 붙어있어서 노출이 되기 때문에 보안성이 떨어짐
링크 뒤에 직접 작성해서 전송할 수 있고 form의 데이터를 get방식으로 전송할 수 있고 ajax를 이용해서 get방식으로 전송 가능
직접 작성 시 반드시 인코딩 설정을 해주어야 함

=>post방식
파라미터를 요청 본문에 포함시켜 전송하는 방식
파라미터가 보이지 않음
데이터 길이에 제한이 없음
form의 데이터를 post방식으로 전송하던가 ajax를 이용해서 post방식으로 전송 가능
file이나 password를 전송하는 경우는 반드시 post방식으로 처리해야 함

=>spring의 파라미터 읽기
HttpServletRequest 나 MultipartHttpServletRequest(file이 있는 경우) 객체를 요청 처리 메서드릐 파라미터로 만들어서
getParameter나 getParameterValues로 읽어내는 방식

요청처리 메서드의 매개변수로 @RequestParam("파라미터이름") 자료형 변수명을 추가해서 파라미터를 읽어내는 방식
이 경우는 파라미터의 값이 자료형으로 강제 형변환을 수행해 줌
자료형이 안 맞으면 에러가 발생

Command(파라미터 이름으로 만들어진 속성들을 소유한 클래스) 객체를 이용하는 방식 - 권장

File 파라미터의 자료형은 MultipartFile이고 file이 있는 경우는 Dispatcher-SErvlet에 file을 위한 설정을 추가해주어야 함

7)Controller에서 파라미터 읽기
=>index.jsp파일에 링크 추가
<a href="parameter">파라미터 읽기</a><br/>

=>Controller에서 parameter 요청을 처리하는 메서드 작성
=>views 디렉토리에 parameter.jsp 작성

=>form의 데이터를 받기 위한 command객체의 클래스 dto 생성 - domain패키지에.. MemberDTO 클래스
페이지 번호 Integer (wrapper class) ㅊㅊ (null 대입 가능하도록.., Object 타입으로 변환 가능)
double -> Double
int -> Integer

=>PageController에 3개의 요청처리 메서드를 생성하고 파라미터를 읽어서 콘솔에 출력

=>최근에는 파라미터가 하나일 때는 url에 기재하는 방식을 많이 사용하고 여러개의 파라미터일 때는 command객체를 이용하는 방식을 많이 사용
controller에서 읽은 파라미터를 service에게 바로 넘겨서 service가 바로 사용할 수 있는 형태로 만듦

8)Controller의 요청처리 메서드의 파라미터
=>HttpServletRequest, HttpServletResponse, HttpSession
=>Map, model, ModelMap : 뷰에 전달할 데이터를 생성하게 위한 파라미터 , model 많이 씀..
=>@RequestParam
=>@PathVariable
=>Command 객체
=>@ModelAttribute를 이용하면 Command 객체를 결과 페이지에 request에 저장해서 전송할 수 있음
유효성 검사에서 이용
=>Errors, BindingResult : 유효성 검사에서 이용
=>RedirectAttributes : 결과 페이지에 한번만 사용할 수 있는 데이터르 ㄹ전송 시 이용 - REdirect로 이동 시 request에 저장 시 데이터가 전달이 안되고
session에 저장 시 지우기가 번거로운데 RedirectAttributes를 이용 시 redirect로 이동해도 전달이 되고 한번 사용하면 자동으로 소멸 됨

=>최근의 web programmin에서는 view에 데이터를 전달하는 형태를 권장하지 않기 때문에
실제로는 파라미터를 읽어내는 것들만 알아도 됨..

66
rest : VO,List,ResponseEntity

조회 forward - 새고시 새 데이터 (많은 새고 공격 ddos 막으려면 redirect -> rest api쓰면 해결됨(text는 용량 작음)
삽삭갱 redirect

74 cookie 저장 / 임시 데이터베이스 ㅊㅊ

128 테이블하나 만들자

13.file upload처리
1)파일 업로드 폼을 생성
h3>파일 업로드</h3>
<form action="fileupload" method="post" enctype="multipart/form-data">
	이름 : <input type="text" name="name"><br/>
	파일 : <input type="file" name="pictureurl"><br/>
	<input type="submit" value="업로드">
</form>

2)pom.xml파일에 의존성 추가
<!-- 파일 업로드 라이브러리 271p-->
<dependency>
	<groupId>commons-fileupload</groupId>
	<artifactId>commons-fileupload</artifactId>
	<version>1.3.1</version>
</dependency>

3)servlet-context.xml 파일(/webapp/WEB-INF/spring/appServlet/servlet-context.xml)에 파일 업로드 위한 resolver설정
<!-- 파일 업로드 설정 -->
<beans:bean id="multipartResolver"
class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
</beans:bean>

4)파일 업로드 폼의 데이터를 표현할 dto 클래스 생성 - domain.ReportDTO

업로드 될 파일 이 저장될 디렉토리를 webapp 디렉토리에 생성 - upload (실제파일은 별도의 서버에 저장해야함.. 프로젝트에 저장하면 안됨..), 서버 멈추고 디렉토리 생성해야 인식함..
업로드는 절대경로 이용

5)PageController 클래스에 파일 업로드 처리를 위한 메서드를 생성
