14. git hub에 만들어진 프로젝트 가져오기
1)가져올 url : https://github.com/itggangpae/springitem
2)file - import - git - clone a git uri - url입력

**MyBAtis Framework( sql mapper, sql을 프로그래밍 언어의 코드와 분리시켜서 작성한 후 사용하는 방법으로 
유지보수 편리하고 구현이 쉬워서(반복되는 코드 줄임) si업계에서 많이 사용하나 성능이 떨어져서 최근의 플랫폼 기업들은 orm방식인
jpa+hibernate 조함을 선호)
를 이용한 mysql 데이터베이스 활용

1. 샘플 데이터 생성 spring mvc ppt (128p)
CREATE TABLE  ITEM(
	itemid int,
	itemname VARCHAR(100),
	price int,
	description VARCHAR(200),
	pictureurl VARCHAR(100),
	PRIMARY KEY (itemid)
)engine=innodb default charset=utf8;

-- engine=innodb-삽삭갱 특화/ myisac-조회특화 
-- default charset=utf8; 모두 공통으로 utf8쓰기로 약속.. 한글 한 글자가 3바이트, 한글이면 *3해서 계산
-- engine, default : 생략 가능

insert into item values(1, '레몬', 500, 'Vitamin-A', 'lemon.jpg'); 
insert into item values(2, '오렌지', 1500, 'Vitamin-B', 'orange.jpg'); 
insert into item values(3, 'Kiwi', 2000, '비타민-C', 'kiwi.jpg'); 
insert into item values(4, 'Grape', 1000, 'Vitamin-D', 'grape.jpg'); 
insert into item values(5, 'Strawberry', 2000, 'Vitamin-E', 'strawberry.jpg'); 
insert into item values(6, 'Mandarin', 300, 'Vitamin-F', 'mandarin.jpg'); 

.붙는건 숨긴 디렉토리라는 뜻 ex .git
맥-리눅스기반
책에 있는 소스 내가 바꿔서 실행해보기 ㅊㅊ

2. pom.xml파일에 의존성 설정
=>스프링에서 데이터베이스 사용시 필수 : spring-jdbc, 데이터베이스의 의존성(mysql)
<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.16</version>
</dependency>
알파 개발자의 환경에서 테스트
베타 사용자가 사용자 환경 테스트
스프링은 jdk 11버전에 최적화되어있음..

=>데이터베이스 프레임워크의 의존성
mybatis는 mybatis와 mybatis-spring

=>dto나 vo 생성을 편리하게 하기 위해서 lombok
테스트를 위해서 spring-test
데이터베이스 로그 출력을 위해서 log4jdbc 라이브러리 사용(스프링 부트는 기본) - 어떤 sql문을 sql문을 어떻게 수행했는지 로그 보여줌

80
<dependency>
	<groupId>org.springframework</groupId>
	<artifactId>spring-jdbc</artifactId>
	<version>${org.springframework-version}</version>
</dependency>
<dependency>
	<groupId>org.mybatis</groupId>
	<artifactId>mybatis</artifactId>
	<version>3.5.7</version>
</dependency>
<dependency>
	<groupId>org.mybatis</groupId>
	<artifactId>mybatis-spring</artifactId>
	<version>2.0.6</version>
</dependency>

<dependency>
	<groupId>org.bgee.log4jdbc-log4j2</groupId>
	<artifactId>log4jdbc-log4j2-jdbc4</artifactId>
	<version>1.16</version>
</dependency>

총 5개..

3. root-context.xml에 디비 접속을 워한 DataSource 빈을 생성하는 코드 작성
스프링은 디비 접속에 DataSource를 사용하는 것을 강제함
커넥션 풀 - 적정량의 커넥션을 만들어 놓고 사용..
자바코드는 
자바소스 -> 컴파일 해서 class 생성 -> class들 을 묶어서 빌드(여러 클래스 있을 때 작업 순서 정함) -> 실행(run)
자바 코드가 아닌 경우는 읽어서 바로 수행하게 됨

설정하는 부분을 자바코드로 만들 시 실행하기 전에 컴파일과 빌드를 다시 해야 함
자바 이외의 코드(ex xml파일)는 다시 읽기나 재실행만 하면 됨

개발환경에서 운영환경으로 이전 (Migration - 이행)할 때 변경할 만한 내용은 자바코드보다는 
별도의 파일이나 데이터베이스에 작성하고 읽어내는 것이 에러를 줄이는 방법 중 하나임
또한 보안의 축면에서도 유리 (별도의 설정 파일 이용)

디비 연결
root-context.xml : 모든 곳에서 사용 가능 (일반적으로..)
디비가 이 url 패턴에만 쓸 경우 servlet-context.xml에 작성

<bean id="dataSource"
	class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	<property name="driverClassName">
		<value>com.mysql.cj.jdbc.Driver</value> -- mysql5.0이면 cj 빼야 함
	</property>

	<property name="url">
		<value>jdbc:mysql://localhost:3306/데이터베이스이름?useUnicode=yes&amp;characterEncoding=UTF-8</value>	-- 맥일 때 간혹 타임존 미국일 때.. ?serverTimezone=UTC 윈도우는 할 필요 없음
	</property>
	-- <value>jdbc:mysql://localhost:3306/webmail?serverTimezone=UTC</value> 타임존 에러 시
	<property name="username">
		<value>root</value>
	</property>

	<property name="password">
		<value>wnddkd</value>
	</property>
</bean>

4. 데이터베이스 접속 정보 테스트
1)src/test/java 디렉토리에 클래스 생성 - ItemTest (배포시 없어짐)
**배달의 민족 tdd

IoC : 제어의 역전 또는 역흐름으로 변역하는데 클래스는 개발자가 만들고 클래스의 인스턴스를 컨테이너나 프레임워크 생성해서 사용하고 수명주기 관리를 하는 것
DI(Dependency Injection) : 의존성 주입, 클래스 내부에서 사용할 인스턴스를 내부에서 생성하지 않고 외부에서 생성 후 생성자나 setter메서드를 이용해서 주입받아서 사용하는 것
(DataDource를 내가 만들지 않고 아까 만든 설정파일에서 가져오겠다)

TDD : 테스트 주도 개발로 프로그램을 만들 때 동작 가능한 최소한의 테스트 코드를 먼저 만들고 구현해나가는 방식


3)테스트
=>코드 위에서 우클릭 run as - junit test 선택 (서버 킬 필요 없음..)
=>태스트 메서드 동작을 확인 : 녹색 바가 만들어지고 에러 있으면 빨간색 바
=>콘솔 확인해서 connection 인스턴스가 출력되는지 확인하고 그이외의 경우는 메기지를 보고 수정해서 다시 테스트

5. mybatis 설정
=>xml 파일을 이용해서 사용 가능 또는 인터페이스 이용해서 사용 가능
=>xml파일을 이용 시 환경설정 파일을 만들고 사용할 수도 있고 만들지 않고 바로 mapper파일만 만들어서 사용도 가능
1)테이블을 표현하기 위한 dto 클래스 생성 : domain.ItemDTO
/*
	ItemDTO dto = new ItemDTO();
	dto.setItemid(1);
	dto.setItemname("사과");
	
	//빌드 아용 시 @Builder 빌드패턴 사용 가능
	ItemDTO dto1 = ItemDTO.builder().itemid(1).itemname("사과").build();	//인스턴스 생성과 대입을 한번에 가능
	여기서 빠진 속성은 기본값이 들어감..
*/

2)mybatis 환경 설정 파일 작성
=>src/main/resources 디렉토리에 mybatis 디렉토릴르 생성
=>mybatis 디렉토리에 mybatis-config.xml파일을 생성해서 작성

xml파일의 종류
=>개발자가 데이터를 표현하기 위해서 사용하는 경우 rss 와이파이모양..
=>설정으로 이용하기 위해서 라이브러리에 제공한느 경우
상단에 xml파일을 해석하기 위한 위치가 포함되어 있음 위치는 바꾸면 안됨
86p http://mybatis.org/dtd/mybatis-3-config.dtd (파일의 경로)
쓰기는 xml이지만 코드로 바꿔줌

mybatis-config.xml
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>	-- 환경설정
	<typeAliases> -- 별명 설정
		<package name="dto 클래스가 있는 위치"/> -- com.adamsoft.item.domain
	</typeAliases>
</configuration>

sql 파일은 테이블 단위로 생성
itemmapper, tablemapper...
=>mybatis 디렉토리에 mappers디렉토리를 생성
=>mappers 디렉토리에 item테이블 관련 sql을 작성할 item.xml파일 생성하고 기본구조만 작성
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="itemmapper">
</mapper>

factory : 어떤 클래스의 인스턴스를 대신 만들어줌

=>root-context.xml 파일에 MyBatis를 사용할 수 있는 클래스의 객체를 생성하는 코드를 추가 - 일관성 생김
root-context.xml
<bean id="sqlSessionFactory"
	class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource" />	-- root-context 에서 쓴 이름 그대로써줘야함
	<property name="configLocation"
		value="classpath:mybatis/mybatis-config.xml" /> -- 환경설정 파일 만들었을 시에만 쓰면 됨
	<property name="mapperLocations"
		value="classpath:mybatis/mappers/**/*.xml" />	-- mappers 안 확장자 .xml인건 모두 매퍼다
</bean>

<bean id="sqlSession"
	class="org.mybatis.spring.SqlSessionTemplate">
	<constructor-arg index="0" ref="sqlSessionFactory" /> -- 생성자의 첫번째 매개변수는 sqlSessionFactory이다
</bean>

=>트랜젝션 사용을 위한 설정을 tx네임스페이스 추가
namespace - tx 체크

4)Mybatis 관련
=>root-contex.xml에 spring-jdbc나 mybatis를 사용 시 트랜잭션을 이용하기 위한 TransactionManager 클래스의 빈과 
트랜잭션을 어노테이션으로 설정 할 수 있는 빈 설정 코드를 추가
89

<bean id="transactionManager" 	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="dataSource" />

</bean>

<tx:annotation-driven />

5)mybatis 설정 테스트
=>테스트 클래스에 작성
@Autowired	//SqlSession 주입
private SqlSession sqlSession;

@Test	//@Test만 주석 처리해도 실행 안함
public void testMyBatis() {
	System.out.println(sqlSession);	//org.mybatis.spring.SqlSessionTemplate@7f34a967 해시코드 확인
}

6)item 서비스를 사용하기 위한 구조 만들기
1)item 서비스 관련 domain클래스르 생성
=>계층별로 주고받을 dto 클래스 생성 - domain.ItemDTO
=>테이블과 직접 연동할 entity 클래스 생성 (dto와 entity 같을 땐 생략)

2)db연동을 위한 클래스나 인터페이스 생성 : dao.ItemRepository
@Repository
public class ItemRepository {
	@Autowired
	private SqlSession sqlSession;

}

3) 비즈니스 로직 처리할 서비스 
=>요청을 처리하는 메서드의 원형을 갖는 service.ItemService 인터페이스를 생성
public interface ItemService {

}

=> 요청을 처리하는 메서드를 구현할 ItemServiceImpl 클래스 생성
@Service
public class ItemServiceImpl implements ItemService {
	@Autowired
	private ItemRepository itemRepository;
}

=>요청 url과 필요한 service로직을 연결하고 데이터를 리턴하거나 뷰를 설정하는 controller클래스 생성 - ItemViewController
@Controller
public class ItemViewController {
	@Autowired
	private ItemService itemService;
}

7. 전체 데이터를 가져와서 출력하는 서비스 작성
1)item.xml에 필요한 sql을 작성
2)ItemRepository 클래스에 sql을 호출하는 메서드를 작성
public List<ItemDTO> getAll() {
	return sqlSession.selectList("itemmapper.getall");
}
3)ItemService, 
ItemServiceImpl 클래스에 전체 데이터를 가져오는 요청 처리 메서드를 작성
4)ItemController 클래스 전체 데이터를 가져오는 url과 서비스 요청 처리 메서드와 view를 매핑
5)index.jsp파일에 전체보기 링크를 추가 후 전체 데이터 출력하는 view 생성
=>item디렉토리의 list.jsp파일

99
<!-- JSTL Core 기능 사용 설정 -->
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<!-- EL을 사용하기 위한 설정으로 없어도 되는 경우가 많지만 간혹 EL을 가지고 출력이 안되는 경우가 있어서 설정 -->
<%@ page isELIgnored="false"%>
101

=>webapp 디렉토리에 css폴더 생성
=>css폴더에 style.css 파일 생성 102

=>파일을 작성해도 스타일시트 없다라고 404에러 발생
web.xml파일에서 appServlet 등록하는 부분을 보면 url pattern이 /로 되어 있음
/는 .jsp를 제외한 모든 요청을 처리한다라는 의미
./css/style.css를 처리하는 메서드가 controller에 없어서 404에러 발생한 것임
이 문제 해결 위해서는 servlet-context.xml에 controller가 처리하지 못하는 요청은 web container가 처리하도록 해주는 설정을 추가해야 함

=>servlet-context.xml에 코드를 추가 - 스프링에서 거의 필수 코드
<default-servlet-handler/>
=>서버를 재시작하고 전체보기 하면 404에러 없이짐

8. 상세보기
1)item.xml파일에 상세보기를 위한 sql을 작성
<select id="getitem" parameterType="java.lang.Integer" resultType="ItemDTO">
		select * from ITEM where itemid = #{itemid}
</select>
2)itemRepository
public ItemDTO getItem(Integer itemid) {
		return sqlSession.selectOne("itemmapper.getitem", itemid);
}

3)ItemService 작업
=>ItemService 인터페이스에 상세보기 처리 메서드를선언
public ItemDTO getItem(Integer itemid);
=>ItemServiceImpl 클래스에 상세보기 처리 메서드를 구현
@Override
public ItemDTO getItem(Integer itemid) {	//파라미터 두개 쓰지 말자.. dto만들자
	//실제는 비즈니스 로직 들어감
	return itemRepository.getItem(itemid);
}

4)list.jsp파일에 상세보기 요청을 생성하기 위해서 이름 출력 부분을 수정
<td align="left"><a href="getitem?itemid=${item.itemid}">${item.itemname}</a></td>

4)ItemController클래스에서 상세보기 처리 메서드를 작성
@RequestMapping(value = "getitem", method = RequestMethod.GET)
public String getItem(@RequestParam("itemid") Integer itemid, Model model) {
	
	ItemDTO dto = itemService.getItem(itemid);
	model.addAttribute("item",dto);
	
	return "item/getitem";
}
	
6)item 디렉토리에 getitem.jsp 만들고 출력
https://developers.kakao.com/docs/latest/ko/daum-search/dev-guide

https://www.data.go.kr 공공데이터 포털
https://www.data.go.kr/data/15066426/fileData.do#/API%20%EB%AA%A9%EB%A1%9D/getuddi%3A358faf8e-8ca9-4897-99c8-aaff3af26392

7)webapp 디렉토리에 이미지들을 img 디렉토리로 생성

9. 상세보기 수정
=>파라미터가 하나인 경우는 최근에는 파라미터로 만들지 않고 url에 추가하는 형태로 많이 만듦
1)list.jsp에 이름 출력하는 부분의 링크 수정
<td align="left"><a href="getitem/${item.itemid}">${item.itemname}</a></td>

2)ItemViewController 클래스의 상세보기 요청 처리 메소드 수정
@RequestMapping(value = "getitem/{itemid}", method = RequestMethod.GET)
public String getItem(@PathVariable("itemid") Integer itemid, Model model) {
	
	ItemDTO dto = itemService.getItem(itemid);
	model.addAttribute("item",dto);
	
	return "item/getitem";
}

이미지는 url경로가 localhost:8080/getitem/1로 바뀌어서 안나옴(디렉토리가 하나 더 생김..).. (원래는 getitem?item=1)

3)getitem.jsp파일의 이미지 출력 경로 수정
<td><img src="../img/${item.pictureurl}"> -- ../ 상위 디렉토리로..

10. mybatis의 sql을 인터페이스에 작성해서 수행하도록 프로젝트 변경
1)dao 패키지에 mybatis sql을 작성하고 dao클래스의 역할 까지 수행하는 인터페이스를 추가 - ItemMapper
@Repository
public interface ItemMapper {
	@Select("select * from ITEM")
	public List<ItemDTO> getAll();
	
	@Select("select * from ITEM where itemid = #{itemid}")
	public ItemDTO getItem(Integer itemid);
}
mappers(item.xml), repository, ItemService 인터페이스 생략 가능.. (3->1)

2)ItemServiceImpl클래스의 ItemRepository 대신에 ItemMapper가 수행하도록 변경
private ItemMapper itemRepository;

3)root-context.xml에서 mybatis 사용 bean 설정 코드를 수정
<bean id="sqlSessionFactory"
	class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource" />		
</bean>
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<property name="basePackage" value="com.adamsoft.item.dao"/> -- ItemMapper 있는 패키지
</bean>

기존 ItemRepository
//@Repository -- 주석처리
public class ItemRepository {
	//@Autowired
	private SqlSession sqlSession; -- 주석처리
	
10. json 출력
=>RestAPI : 일관성이 있는 URL을 이용해서 데이터를 출력
안드/아이폰/pc 어디서든 요청해도 같은 결과..

1)데이터 포맷
=>text : 문자열인데 구분하면 플랫파일, csv(,로 구분-절대 변하지 않는 데이터), tsv(탭으로구분), fwf(일정한 간격 가지고 문자열 씀)등으로 구분
=>xml : 태그 형태로 데이터 표현, 사람이 알아보기는 좋은데 사이즈가 큼..
=>json : 자바스크립트 객체 표현법으로 데이터를 표현, 사람이 알아보기는 쉽지 않지만 기계가 알아보기 어렵지 않고 xml보다 경량
=>yml : 이베일 표현 형식으로 데이터를 표현하는 방법인데 최근에 설정 파일들에 많이 이용 (중복된 내용 표시하지 않음, 계층구조) 야믈

2)RestController
=>REST API를 위한 컨트롤러
=>controller에서 문자열을 리턴하면 csv가 되고 DTO나 Map 그리고 List를 리턴하면 json형태로 만들어서 출력함

3)전체보기와 상세보기를 REST API로 구현
=>pom.xml파일에 json출력을 위한 라이브러리의 의존성 추가
<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.13.3</version>
</dependency>

4)controller 패키지에 json출력을 위한 클래스를 만들고 요청 처리 메서드 작성 - controller.ItemRestController
http://localhost:8080/list.json

List는 인덱스로 구분..
컨트롤러에서 리턴 데이터는 맵이나 dto처럼 이름과 함께 줘야 함..

@RequestMapping(value = "list.json", method = RequestMethod.GET)
public Map<String, Object> getAll(){
	Map<String, Object> map = new HashMap<String, Object>();
	List<ItemDTO> list = itemService.getAll();
	map.put("result", true);
	map.put("data",list);
	return map;
}

http://localhost:8080/1/item.json -- 파라미터 있을 때.. 상세보기
@RequestMapping(value = "{itemid}/item.json", method = RequestMethod.GET)
public Map<String, Object> getItem(@PathVariable("itemid") Integer itemid){
	Map<String, Object> map = new HashMap<String, Object>();
	ItemDTO item = itemService.getItem(itemid);
	map.put("result", true);
	map.put("data", item);
	return map;
}

5)브라우저에서 테스트

브랜치 생성하고 깃에 올리기
프로젝트 우클릭 - team - switch to - new branch
코드 수정 후 commit, push