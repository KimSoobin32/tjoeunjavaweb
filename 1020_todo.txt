검색 구현
- 대소문자 문제 (db에 아예 소문자만 저장하는 방법도.. jpa는 대소문자 처리 못함..)
- 좌우 공백 문제 (앞에 공백 넣었을 때 공백 자동으로 없앤 결과 검색) dto에서 데이터 받았을 때 전부 trim
- 중간 공백이 있을 때 어떻게 검색을 처리? (공백 있을 때 and나 or ... 족발 막국수 => 족발 or 막국수)

키오스크

=>list.html파일을 수정해서 검색 폼을 추가하고 이벤트 처리를 수행
<form action="/guestbook/list" method="get" id="searchForm">
  <div class="input-group">
    <input type="hidden" name="page" value = "1"><!-- 기본으로 검색 시 1페이지로 보여지기 때문에.. -->
    <div class="input-group-prepend">
      <select class="custom-select" name="type"><!-- PageRequestDTO에서 검색 타입을 type으로 지정했기 때문에..-->
        <option th:selected="${pageRequestDTO.type == null}">-------</option>
        <option value="t" th:selected="${pageRequestDTO.type =='t'}" >제목</option><!--ServiceImpl에서 지정한 값 t(t가 들어가면 제목..), th:selected -제목으로 검색했을 때 제목 선택되어 나옴-->
        <option value="c" th:selected="${pageRequestDTO.type =='c'}" >내용</option>
        <option value="w" th:selected="${pageRequestDTO.type =='w'}" >작성자</option>
        <option value="tc" th:selected="${pageRequestDTO.type =='tc'}" >제목 + 내용</option>
        <option value="tcw" th:selected="${pageRequestDTO.type =='tcw'}" >제목 + 내용 + 작성자</option>
      </select>
    </div>
    <input class="form-control" name="keyword"
           th:value="${pageRequestDTO.keyword}">
    <div class="input-group-append" id="button-addon4">
      <button class="btn btn-outline-secondary btn-search" id="btn-search"
              type="button">검색</button>
      <button class="btn btn-outline-secondary btn-clear" id="btn-clear"
              type="button">초기화</button>
    </div>
  </div>
</form>

<script> <!--jquery 권장 안함 바닐라스크립트 사용.. -->
  var searchForm = document.getElementById("searchForm");
  document.getElementById("btn-search").addEventListener("click", (e) => {
    searchForm.submit();
  });
  document.getElementById("btn-clear").addEventListener("click", (e) => {
    searchForm.reset();
  });
</script>

=>list.html파일의 링크페이지 번호 링크 부분 수정
<ul class="pagination h-100 justify-content-center align-items-center">
  <li class="page-item " th:if="${result.prev}">
    <a class="page-link" th:href="@{/guestbook/list(page= ${result.start -1}
	, type=${pageRequestDTO.type}, keyword=${pageRequestDTO.keyword})}" -- 추가된 부분.. (이전,페이지 번호, 다음 버튼에 각각 추가)
       tabindex="-1">이전</a>
  </li>
  <!--현제 페이지 번호와 출력하는 페이지 번호가 같으면 active-->
  <li th:class=" 'page-item ' + ${result.page == page?'active':''} " th:each="page:${result.pageList}">
    <a class="page-link" th:href="@{/guestbook/list(page = ${page}, type=${pageRequestDTO.type}, keyword=${pageRequestDTO.keyword})}">
      [[${page}]]
    </a>
  </li>
  <li class="page-item" th:if="${result.next}">
    <a class="page-link" th:href="@{/guestbook/list(page= ${result.end +1}, type=${pageRequestDTO.type}, keyword=${pageRequestDTO.keyword})}">다음</a>
  </li>
</ul>


=>상세보기 링크에도 추가
<td>
    <a th:href="@{/guestbook/read(gno = ${dto.gno},page=${result.page}, type=${pageRequestDTO.type}, keyword=${pageRequestDTO.keyword})}">[[${dto.title}]] </a>
</td>

=>read.html파일의 목록보기에도 type, keywerd 추가
<a th:href="@{/guestbook/list(page=${requestDTO.page}, type=${requestDTO.type}, keyword=${requestDTO.keyword})}"><button type="button" class="btn btn-info">목록보기</button></a>
//cpntroller의  @ModelAttribute("requestDTO") PageRequestDTO requestDTO 의 requestDTO 따름... 원래는 일관성 있게 pageRequestDTO 하나로 맞춰줘야 함..


=>좌우 공백 제거 GuestBookServiceImpl에서 작업
@Override
public PageResponseDTO<GuestBookDTO, GuestBook> getList(PageRequestDTO requestDTO) {

    //requestDTO가 넘겨받은 keyword 값의 좌우 공백을 제거
    String keyword = requestDTO.getKeyword();
    if(keyword != null){
        requestDTO.setKeyword(keyword.trim());
    }

//알고리즘 - characterAt, length 이용해 uppeerCase, trim 구현.. 연습 가능..


-----
full Stack
Front end - js기반(react / vue) / native(kotlin / swift)
back end
react / react native(스마트폰) - 블록체인 서비스
아키텍쳐 (네트워크.. 보안..)
프로젝트마다 database 생성

ajax 는 자기 도메인 이외의 거는 못 가져옴
서버에서 cors 풀어주던가 proxy서버 만들어야 함
-----

**Todo Application Back end
1.MySQL에 접속해서 사용할 데이터베이스 생성
2. Spring Boot 프로젝트 생성
build tool : gradle
language : java 11
의존성 : devtools, web, jpa, lombok, mysql

3.application.properties 파일에 기본 설정을 추가하고 실행해서 데이터 에러없는지 확인
#MySQL mysql 5.0 이하는 useUnicode=true& ... utif-8 넣어줘야 함..
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/webmail?serverTimezone=UTC
spring.datasource.username=hong
spring.datasource.password=a123456
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
logging.level.org.hibernate.type.descriptor.sql=trace
#Live Reload
spring.devtools.livereload.enabled=true
spring.thymeleaf.cache=false


4.Entity 작업
1)Application 클래스에 jpa감시 작업을 위한 어노테이션 추가
@EnableJpaAuditing
@SpringBootApplication
public class TodoApplication {

	public static void main(String[] args) {
		SpringApplication.run(TodoApplication.class, args);
	}

}

2)공통으로 사용할 데이터 삽입 날짜와 수정 날짜를 갖는 entity를 생성
=>entity.BaseEntity
@MappedSuperclass   //entity를 별도로 생성하지 않는 클래스
@EntityListeners(value = {AuditingEntityListener.class})    //jpa를 감시하고 있다가 동작하도록 설정
@Getter
public abstract class BaseEntity {  //abstract : 인스턴스 만들지 않음
    @CreatedDate
    @Column(name = "regdate", updatable = false)
    private LocalDateTime regDate;

    @LastModifiedBy
    @Column(name = "moddate")
    private LocalDateTime modDate;

}

3)ToDo 데이터를 저장할 entity클래스 생성 - entity.ToDo
@Builder
@Data
@EqualsAndHashCode  //없으면 실행은 되나 해시코드 경고 뜸
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "todo")   //테이블 이름 바꾸고 싶을 때
public class ToDo extends BaseEntity{   //마지막 수정 날짜, 삽입날짜도 같이 들어옴
    
    //랜덤한 UUID를 가지고 아이디값을 생성
    @Id
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid")
    private String id;  //기본키로 사용할 아이디

    @Column(length = 100, nullable = false)
    private String userId;  //사용자 식별을 위한 아이디

    @Column(length = 500, nullable = false)
    private String title;   //제목

    @Column(nullable = false)	//not null 설정
    private boolean done;    //수행 여부
}

4)실행하고 테이블이 만들어졌는지 확인

5.Repository 인터페이스를 생성하고 테스트
1)ToDo 엔티티를 사용하기위한 repository 인터페이스를 생성하고 필요한 메서드를 선언 - persistence.ToDoRepository
public interface ToDoRepository extends JpaRepository<ToDo, String> {

    //userId를 가지고 조회하는 메서드
    public List<ToDo> findByUserId(String userId);	//findByUserId 는 entity 변수 명 따름..

}

2)test디렉토리에 Test를 위한 클래스를 만들고 ToDo Entity의 CRUD작업을 테스트
@SpringBootTest
public class ToDoTest {

    @Autowired
    private ToDoRepository toDoRepository;

    //데이터 삽입 테스트
    @Test
    @Disabled
    public void testInsert(){
        ToDo todo1 = ToDo.builder()
                .userId("adam")
                .title("서점 가기")
                .build();
        toDoRepository.save(todo1);

        ToDo todo2 = ToDo.builder()
                .userId("adam")
                .title("삼척 여행")
                .build();
        toDoRepository.save(todo2);
    }

    //유저 아이디를 이용한 조회
    //@Test
    public void testFindUserId(){
        List<ToDo> list = toDoRepository.findByUserId("adam");

        //2가지 방법
//        for(ToDo toDo : list){
//            System.out.println(toDo);
//        }

        list.stream().forEach(toDo -> {
            System.out.println(toDo);
        });
    }

    //id에 해당하는 하나의 데이터 조회
    //데이터베이스에서 id를 조회해서 테스트
    //@Test
    public void testDetail(){
        Optional<ToDo> result = toDoRepository.findById("402881c783f3897d0183f38986720000");
        if(result.isPresent()){
            System.out.println(result.get());
        }else {
            System.out.println("데이터가 존재하지 않습니다.");
        }
    }

    //데이터 수정
    //@Test
    public void testUpdate(){   //이미 있는 id 넣으면 자동으로 수정됨..
        ToDo todo = ToDo.builder()
                .id("402881c783f3897d0183f38986720000")
                .userId("아담")
                .title("오목교 교보 가기")
                .done(true)
                .build();
        toDoRepository.save(todo);
    }

    //데이터 삭제
    @Test
    public void testDelete(){   //이미 있는 id 넣으면 자동으로 수정됨..

        toDoRepository.deleteById("402881c783f3897d0183f38986720000");
    }


}

6.Service 계층 작업 - DTO, Service 인터페이스, ServiceImpl 클래스 (클라이언트로부터 받는 dto와 주는 dto가 다르면 2개 만들어야 함.. 같으면 굳이 안 나눠도 됨)
1)Controller계층과 Service계층에서 사용할 dto 클래스를 생성 - domain.ToDoDTO ..요청에 사용하는 dto
@NoArgsConstructor
@AllArgsConstructor
@Data
public class ToDoDTO {
    private String id;
    private String title;
    private boolean done;
    //userId는 로그인 시 사용할거라 빼놓음..

    //entity를 받아서 dto 인스턴스를 생성해주는 생성자
    public ToDoDTO(ToDo toDo){
        this.id = toDo.getId();
        this.title = toDo.getTitle();
        this.done = toDo.isDone();
    }

    //dto 인스턴스를 entity 인스턴스로 변화해주는 메서드
    public static ToDo toEntity(ToDoDTO dto){
        return ToDo.builder()
                .id(dto.getId())
                .title(dto.getTitle())
                .done(dto.isDone())
                .build();
    }

}

2)컨트롤러에서 응답에 사용할 dto클래스를 생성 - domain.ResponseDTO
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Data
public class ResponseDTO<T> {
    private String error;
    private List<T> data;
}

3)사용자의 요청을 처리할 메서드의 원형을 가진 Service 생성 - service.ToDoService
public interface ToDoService {
    
    //ToDo entity 대신에 DTO로 설정해도 됨
    //주의할 점은 ToDo엔티티를 받을 거라면 수정할 수 없도록 final로 설정해야 함 
    public List<ToDo> create(final ToDo toDo); //데이터 삽입
    
    public List<ToDo> retrieve(final String userId);    //UserId를 이용한 조회
    public List<ToDo> update(final ToDo toDo);    //데이터 수정
    public List<ToDo> delete(final ToDo toDo);    //데이터 삭제
    
    
    
}

4)사용자의 요청을 처리할 메서드를 구현할 ServiceImpl 클래스를 만들고 요청을 처리하는 메서드를 구현 - service.ToDoServiceImpl
@Service
@RequiredArgsConstructor
public class ToDoServiceImpl implements ToDoService{

    private final ToDoRepository toDoRepository;

    //유효성 검사를 위한 메서드 (아이디 검사)
    private void validate(final ToDo toDo){
        if(toDo == null){
            throw new RuntimeException("ToDo cannot be null");
        }
        if(toDo.getUserId() == null){
            throw new RuntimeException("UserId cannot be null");
        }
    }

    @Override
    public List<ToDo> create(ToDo toDo) {
        validate(toDo);
        toDoRepository.save(toDo);  //데이터 추가
        return toDoRepository.findByUserId(toDo.getUserId());   //삽입 후 데이터 자신의 데이터 목록을 리턴
    }

    @Override
    public List<ToDo> retrieve(String userId) {
        return toDoRepository.findByUserId(userId);
    }

    @Override
    public List<ToDo> update(ToDo toDo) {
        validate(toDo);
        toDoRepository.save(toDo);  //데이터 수정
        return toDoRepository.findByUserId(toDo.getUserId());   //수정 후 데이터 자신의 데이터 목록을 리턴(해당 유저 아이디에 해당하는 목록이 나옴)
    }

    @Override
    public List<ToDo> delete(ToDo toDo) {
        validate(toDo);
        toDoRepository.delete(toDo);  //데이터 삭제
        return toDoRepository.findByUserId(toDo.getUserId());   //삭제 후 데이터 자신의 데이터 목록을 리턴
    }
}

5)Test클래스에서 Service메서드 테스트
 @Autowired
    private ToDoService toDoService;

    //삽입 테스트
    @Test
    @Disabled
    public void testServiceInsert(){
        ToDo toDo = ToDo.builder()
                .userId("soo")
            .title("서비스 테스트")
            .done(false)
            .build();
    List<ToDo> list = toDoService.create(toDo);
    System.out.println(list);
}

//조회 테스트
//@Test
public void testServiceRetrive(){

    List<ToDo> list = toDoService.retrieve("adam");
    System.out.println(list);
}

//수정 테스트
@Test
@Disabled
public void testServiceUpdate(){
    ToDo toDo = ToDo.builder()
            .id("402881c783f40aa10183f40aa9db0000")
            .userId("soo")
            .title("수정")
            .done(true)
            .build();
    List<ToDo> list = toDoService.update(toDo);
    System.out.println(list);
}

//삭제 테스트
@Test
@Disabled
public void testServiceDelete(){
    ToDo toDo = ToDo.builder()
            .id("402881c783f40aa10183f40aa9db0000")
            .userId("soo")
            .build();
    List<ToDo> list = toDoService.delete(toDo);
    System.out.println(list);
}

7.Controller 계층
1)Controller 클래스를 생성하고 사용자의 요청을 처리하는 메서드를 작성 - controller.ToDoController
@RestController
@RequiredArgsConstructor
@RequestMapping("todo")
public class ToDoController {
    private final ToDoService toDoService;

    //데이터 삽입    //http://localhost:8080/todo에 post방식으로 title만 설정 후 send
    @PostMapping
    public ResponseEntity<?> createToDo(@RequestBody ToDoDTO dto){
        try {
            //가상의 유저 아이디 생성 (아직 로그인 없으므로)
            String temporaryUserId = "temporary-user";

            //Entity 생성
            ToDo toDo = ToDoDTO.toEntity(dto);
            toDo.setUserId(temporaryUserId);

            //데이터 생성
            List<ToDo> entities = toDoService.create(toDo);

            //ToDo를 ToDoDTO로 변환
            //ToDoDTO의 생성자를 이용해서 변환 후 List로 만들어주기
            List<ToDoDTO> dtos = entities.stream().map(ToDoDTO::new).collect(Collectors.toList());

            //응답객체 생성
            ResponseDTO<ToDoDTO> response = ResponseDTO.<ToDoDTO>builder().data(dtos).build();

            return ResponseEntity.ok().body(response);

        }catch (Exception e){
            String error = e.getMessage();
            //응답객체 생성
            ResponseDTO<ToDoDTO> response = ResponseDTO.<ToDoDTO>builder().error(error).build();

            return ResponseEntity.badRequest().body(response);
        }
    }

    //ID로 조회
    @GetMapping
    public ResponseEntity<?> retriveToDoList(){
        
        //임시 ID
        String temporaryUserId = "temporary-user";
        
        //임시 아이디로 데이터 찾아오기
        List<ToDo> entities = toDoService.retrieve(temporaryUserId);
        
        //찾아온 데이터를 이용해서 DTO의 List만들기
        List<ToDoDTO> dtos = entities.stream().map(ToDoDTO::new).collect(Collectors.toList());
        
        //응답 객체 생성
        ResponseDTO<ToDoDTO> response = ResponseDTO.<ToDoDTO>builder().data(dtos).build();

        return ResponseEntity.ok().body(response);  //클라이언트에게 전송
    }

    //데이터 수정    //http://localhost:8080/todo에 put 후 id, title, done
    @PutMapping
    public ResponseEntity<?> updateToDo(@RequestBody ToDoDTO dto){

        try {
            //가상의 유저 아이디 생성 (아직 로그인 없으므로)
            String temporaryUserId = "temporary-user";

            //Entity 생성
            ToDo toDo = ToDoDTO.toEntity(dto);
            toDo.setUserId(temporaryUserId);

            //데이터 생성
            List<ToDo> entities = toDoService.update(toDo);

            //ToDo를 ToDoDTO로 변환
            //ToDoDTO의 생성자를 이용해서 변환 후 List로 만들어주기
            List<ToDoDTO> dtos = entities.stream().map(ToDoDTO::new).collect(Collectors.toList());

            //응답객체 생성
            ResponseDTO<ToDoDTO> response = ResponseDTO.<ToDoDTO>builder().data(dtos).build();

            return ResponseEntity.ok().body(response);

        }catch (Exception e){
            String error = e.getMessage();
            //응답객체 생성
            ResponseDTO<ToDoDTO> response = ResponseDTO.<ToDoDTO>builder().error(error).build();

            return ResponseEntity.badRequest().body(response);
        }
    }

    //데이터 삭제    //http://localhost:8080/todo에 delete 방식으로 id
    @DeleteMapping
    public ResponseEntity<?> deleteToDo(@RequestBody ToDoDTO dto){

        try {
            //가상의 유저 아이디 생성 (아직 로그인 없으므로)
            String temporaryUserId = "temporary-user";

            //Entity 생성
            ToDo toDo = ToDoDTO.toEntity(dto);
            toDo.setUserId(temporaryUserId);

            //데이터 생성
            List<ToDo> entities = toDoService.delete(toDo);

            //ToDo를 ToDoDTO로 변환
            //ToDoDTO의 생성자를 이용해서 변환 후 List로 만들어주기
            List<ToDoDTO> dtos = entities.stream().map(ToDoDTO::new).collect(Collectors.toList());

            //응답객체 생성
            ResponseDTO<ToDoDTO> response = ResponseDTO.<ToDoDTO>builder().data(dtos).build();

            return ResponseEntity.ok().body(response);

        }catch (Exception e){
            String error = e.getMessage();
            //응답객체 생성
            ResponseDTO<ToDoDTO> response = ResponseDTO.<ToDoDTO>builder().error(error).build();

            return ResponseEntity.badRequest().body(response);
        }
    }

}

=>postman과 같은 프로그램으로 테스트

-----
버전관리 도구 - 깃 허브
inteliJ프로젝트 git hub 업로드
=>Git Desktop 설치 https://git-scm.com/downloads

=>email과 user이름을 등록 : cmd 터미널에 접속한 후 명령어 수행 (안해주면 인텔리제이에서 오류남)
git config --global user.name 이름
git config --global user.email 이메일주소


=>intelij에 Git hub 계정 등록
File - Settings - Version Control - GitHub

VCS - share project on git hub (레포지토리생성, 푸시)

vsc가 git으로 바뀌어있음..

가져오기
file - new - project from version control
url 입력 후 clone

-----

**Client 개발
1.개발 환경
js 개발 환경 : node.js (https://nodejs.org/ko/download/ LTS msi)
IDE : vscode

js로 하는건 다node깔아야 함 (짝수 버전이 배포버전 - 짝수 버전 받아야 됨)
설치 확인 : cmd에 node --version
vscode git 업로드는 명령어로 해야 함..

윈도우는 cmd켜놓고 설치 후 버젼 확인하면 인식 못함.. 한번 창 껐다가 켜야 함..

2.SPA (single page application)
=>한번 웹페이지를 로딩하면 사용자가 임의로 새로고침하지 않는 이상 페이지를 새로 로딩하지 않는 애플리케이션 (부분적으로 갱신 - ajax, fetch api- 한번 주고 받으면 끝, 웹소켓 - 계속 주고받음- (채팅..) 이용)
=>SPA 구현을 쉽게 해주는 라이브러리 : react, vue, angular(- 더이상 업데이트 안함..)

3.react 프로젝트(todo) 생성 및 실행
1)생성 - 터미널에서 수행 (저장할 위치 cd로 간 후 명령어 입력)
npx create-react-app 프로젝트 이름

2)실행 (cd todo) 위에서 만든 프로젝트 이름으로 된 디렉토리로 이동 후 실행
같은 디렉토리에서 npm start

3)접속
http://localhost:3000

작업 중지 : ctrl + c

4. 필요한 라이브러리 설치
1)설치 명령 : npm install 라이브러리 이름

2)ui를 편리하게 작성하기 위한 라이브러리 설치
https://mui.com/
설치
npm install --legacy-peer-deps @material-ui/core
npm install --legacy-peer-deps @material-ui/icons

react는 컴포넌트 기반 개발 방식을 취함
컴포넌트 - 함수형(가벼움), 클래스형(견고함, 출력 속도 느림)
출력 느림 보완 - 함수형, 캐싱..


