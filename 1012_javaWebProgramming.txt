**java web programming
1. 스마트 시대의 web programming
1) web 2.0에서 web 3.0
=> 시멘틱 웹의 개념 - 컴퓨터가 정보 자원의 뜻을 이해하고 논리적 추론까지 가능
로봇이 읽을 수 있도록..
=>인공지능이나 블록체인의 개념 추가
블록체인 - 증명 (거래에는 아직..시간 오래 걸림)

html5의 목적
=> off line web application
=> semantic web

2) WOA(Web Oriented Architecture)
=>요즘은 한명의 유저가 여러개의 디바이스를 사용하는 경우가 많은데 이 디바이스들을 사용할 때 
기존의 서비스가 끊기지 않고 이어서 수행되기를 원하는 경우가 많음
이것을 web으로 구현하는 것이 쉬움
=> 웹을 중심으로 전체 시스템 아키텍쳐를 설계

3)framework
=>프로그램의 규모가 확대되고 개발 방법론들이 맣이 등장 - 개발자가 공부할 내용이 많음
=>개발자가 공부할 내용은 최소로 하게 하기 위해서 공통적으로 만들어야 하는 내용을 framework가 제공해서 개발을 빠르고
견고하게 할 수 있도록 도와주는 프로그램 ex spring
=>요즘은 대부분 
php 라라벨
java spring
js node.js, react, vue
ruby rubyonrails

2. web service 구현 방식
1)정적 애플리케이션
=>html, css, js를 이용해 구현
=>js를 ㅣ요용해 동적 구현이 가능하나 js는 자신의 브라우저 바깥을 나가지 못함

2)동적 애플리케이션
=>cgi (common gateway interface) : 클라이언트 요청을 별도의 프로그램이 처리하는데 이 경우에는 프로세스 형태로 처리 - 한번에 하나의 요청만
처리 가능한 방식으로 perl이나 vb 기반의 asp

=>application server 방식 : 클라이언트의 요청의 별도의 프로그램이 처리하는데 스레드 형태로 처리 - 한번에 여러개의 처리가 가능한 방식으로
java, c#, puthon, ruby, js의 프레임워크 등을 이용해서 구현

=> web server 이외에 프로그램을 호출할 별도의 컨테이너가 필요
=> 이 경우에는 일반적으로 web server, web contaioner, application server program, repository로 구성 됨
web server로는 apache, iis, linux, web server등을 이용
web container로는 tomcat, web logic, jboss, zetty, resion등이 있고 국산 제품으로 zeus가 있음

application server program은 프로그래밍 언어 만을 이용하기도 하고 framework을 같이 사용하기도 함

repository는 rebms(oracle, mysql, ms-sql 등) , nosql, hadoop등의 분산 처리 시스템 등이 사용됨 

3. java web programming 개발 환경
1)데이터베이스
mysql 8.0을 도커에 설치
접속도구로 dbeaver 사용

2)java
jdk 11 버전

3) ide(통합개발 환경)
=>eclipse - eclipse를 직접 사용해도 되고 plug 형태로 제공되는 sts, 전자 정부 프레임워크, anyframework
전자 정부 프레임워크, anyframework : 샘플이 있음.. db 연동까지..
STS 3 버전을 사용 - STS4 버전은 spring legacy project 메뉴가 없어짐
spring.io -project- spring tools4 - 아래 spring tool 3suite wiki 3.9.16 - 윈도우는 다운로드 후 압축만 풀면 됨

vo 클래스를 간단하게 만들 수 있도록 해주는 lombok 설치

=>intelij - 최근 많이 사용
무료버전은 web programming을 못함

4.HttpServlet
=>Url을 이용해서 호출할 수 있는 java 클래스
=>j2ee api 클래스
j2eeㄹ르 설치해서 사용해야 하는데 j2se를 설치하고 web container들이 httpservlet 클래스를 사용할 수 있는 라이브러리를 제공하므로 이 라이브러리를 이용해서
사용하거나 spring framework을 이용해서 사용할 수 있음 
=>javax.servlet.http.HttpServlet 클래스를 상속받아서 필요한 메서드를 재정의하고 URL을 등록하는 형태로 사용
=>자바 클래스 이므로 자바 코드에 출력을 위한 코드를 삽입해서 웹 브라우저에 출력
=>웹 컨테이너가 인스턴스를 생성하고 수명 주기를 관리

1) 일반적인 자바 클래스와 다른 점
=>직접 인스턴스를 생성하지 않고 웹 컨테이너가 인스턴스르 ㄹ생성해서 수명 주기를 관리 - IoC(Inversion of Control - 제어의 역전 또는 역흐름)

2)jsp (java server page)
=>HttpServlet이 자바 클래스라서 자바 코들르 작성하는 것은 쉽지만 html출력을 작성하는 것은 번거루ㅗ움
java 코드 안에 html을 삽입하는 형태로 작성해야 함
=>html 코드 안에 java 코드르 넣을 수 잇도록 ㅗ변형한 것

3)HttpServlet과 jsp 비교
=>servlet은 첫번째 요청이 오거나 웹 컨테이너가 시작될 때 컴파일하고 인스턴스를 생성한 후 이 인스턴스를 재사용하는 혀ㅇ태로 동작
=>jsp는 해당하는 요청이 오면 HttpServlet클래스로 만들어지고 인스턴스를 생성해서 요청을 처리하고 소멸됨

jsp, servlet 알기는 해야하나 굳이 할 필요는 없..

=>servlet코드를 수정하면 코드를 다시 컴파일해서 인스턴스를 만들어야 하기 때문에 웹 컨테이너를 중지시켰다가 새로 시작해야 함
=>jsp코드를 요청할때마다 컴파일을 하기 때문에 코드를 수정해도 컨테이너를 재시작할 필요가 없음

운영 환경에서는 종료후 재시작..평소엔 실행중 재시작..

ioc aop di security test(스프링의 강점)...중요!!! 외우자 스프링하려면 꼭 알아야 함

5. web container 설치
=>apache tomcat 사용
=>web container는 web application server(was)라고도 부르는데 web server가 url을 이용해서 필요한 로직을 호출할 수 있도록 web componert를 관리하는
역할을 수행하는 프로그램
java 진영해서는 opensource인 tomcat을 많이 사용하는데 spring boot에서는 설치할 필요가 없음
국내 공공 기관 si 업체에서는 티맥스에서 만든 zeus를 많이 사용함

6. servlet과 jsp
1)dynamic web project를 생성

프로젝트 명  3단 네이밍 com.회사명.프로젝트명
next - 컴파일할 자바 파일 위치 (default output folder 실제 실행-build\classes)
context root : 주소창에 접속할 url경로 (/)
content directory: src/main/webapp 컴파일 하지 않을 경로

xml -> yml, interface로 바뀌는 추세..

2) 실행
=>프로젝트르 선택 후 우클릭 run on server를 선택하고 was-(tomcat)를 선택

3)servlet 생성
=>httpservelt클래스를 상속받는 클래스르 ㄹ만들고 이 클래스와 매핑할 url을 어노테이션을 이용해서 작성하거나 web.xml 파일에 기재한 후 
요청을 처리할 메서드 재정의
=>확인은 servlet클래스를 선택하고 실행해도 되고 프로젝트를 실행한 후 브라우져에 매핑한 url을 입력해서 확인해도 됨

4)jsp생성
=>src/main/webapp 디렉토리 안에 생성하고 작성하는데 특별한 설정을 하지 않으면 src/main/webapp안에 있는 경로가 url이 됨
=>servlet이기는 하지만 doGet과 doPost 메서드가 없으면 요청을 분리해서 처리하지 못함

7. jsp
=>servlet의 변형으로 html 코드에 자바 코드를 삽입하는 형태로 사용할 수 있는 java web component
=>최근의 web Programming 에서 mvc 패턴이나 model2패턴이 등장하면서 jsp파일에 
java코드(스크립트릿-java로직, 표현식-java 데이터 직접 출력)를 직접 사용하는 것을 금기시 함
=>model2는 처리하는 코드는 servlet이나 java class에 작성하고 출력하는 코드만 jsp파일에 작성하는 것
=>mvc(model view controller)패턴 : 역할별로 분리해서 작성
model : 데이터를 만들어내는부분, - servvice, repository, vo-dto-entity
view : 화면 출력부분, - jsp
controller : 2개를 연결시켜주는 부분 - servlet

=>한동안은 jsp파일에 el과 jstl을 이용해서 출력을 수행
jsp는 server측에서 해석을 한 후 html코드를 클라이언트에 전송하는 형태로 동작하는데
최근에는 서버에서 랜더링을 하지 말자는 추세여서 jsp사용이 많이 줄어들음
서버에서 렌더링하지 말자는 이유는 클라이언트 디바이스의 다양화 때문에 모든 클라이언트의 요청에 맞추어서 화면을 만들어줄 수 없기 때문임
요즘은 서버에서 rest api 형태로 json형식의 데이터를 전송해주면 클라이언트측에서 web socket, ajax, fetch api 등을 이용해서 데이터를 전송받고
전송받는 데이터를 파싱해서 직접 출력함
이러한 작업을 단순화 시켜주는 라이브러리로 react, vue, angular등이 맣이 사용됨

1)내장객체
=>httpServletRequest request : 클라이언트의 요청정보를 저장한 클래스의 객체
jsp에서는 내장이고 servlet에서는 요청처리메서드의 첫번째 매개변수
이 객체를 이용해서 클라이언트의 정보를 읽음
클라이언트의 정보중에서 가장 대표적인 것이 요청 방식, 요청 url, 파라미터 등 이다.

요청 방식
get : 데이터를 url에 붙여서 전송하는 방식으로 url 뒤에 ?를 추가하고 속성이름=값& 의 형태로 전송, 파라미터의 길이에 제한이 있고 보안성이 떨어지지만
자동 재전송 기능이 있음, 일반적으로 읽기 작업에 사용

post : 데이터를 요청 헤더에 숨겨서 전송하는 방식, 파라미터 길이에 제한이 없고 외부로 노출되지 않기 때문에 보안성도 좋지만 자동 재전송 기능이 없음
전에는 삽입,삭제,갱신 등에 모두 이용했지만 최근에는 삽입에만 이용하는 것을 권장,
반드시 인코딩을 해서 전송하고 읽는 곳에서 인코딩 설정을 해서 읽어야 하며 전송하고자 하는 데이터에 파일이 있거나 textarea, password가 있다면 get으로 전송하는 것은 안됨
파일을 전송 시 enctype을 multipart/form-data로 설정해야 함
(multipart/form-data -> 용량 큰것은 한번에 보낼 수 없음-잘라서 보내야 함, 번호를 붙인 후 순서대로 합침)

put : post와 같은데 수정할 때 사용 - 전체 수정
(update : 부분수정)
delete : post와 같은데 삭제할 때 사용

파라미터를 읽을 때는 request.getParameter나 request.getParameterValues 메서드를 이용
spring에서는 대부분 파라미터를 vo클래스나 dto 클래스를 이용해서 읽어냄
최근에는 하나의 파라미터 같은 경우는 파라미터를 이용하지 않고 url을 이용함
@PathVariable
bloter.net (/파라미터)형태 ex https://ggangpae1.tistory.com/142

request객체를 이용하면 접속한 클라이언트의 ip(국가 구분 가능)나 referrer(어디서접속했는지-쇼핑몰/네이버/페이스북..)나 
운영체제 종류 및 브라우저 종류를 파악할 수 있음

=> httpServletResponse response : 요청처리 메서드의 두번째 매개변수로 응답객체로 클라이언트에게 응답을 전송하고자 할 때 사용
=>JSPWriter out: 서블릿에서는 response를 이용해서 생성해야 함
클라이언트의 브라우저에 출력하기 위해서 버퍼에 기록하는 클래스의 인스턴스

=>ServletContext application : 모든 클라이언트가 공유할 수 있는 객체 ex 접속자 수
request객체를 이용해서 생성 가능

=>HttpSession session : 하나의 클라이언트가 사용할 수 있는 객체로 접속 시 만들어지고 접속이 끝나면 소멸됨
request객체를 이용해서 생성 가능 (redirect로 이동 시에도 유지하고 싶을 때 사용) - 요즘 사용 줄어드는 추세.. 많이 생성될 시 서버에 부담가서..

=>object page : 하나의 페이지가 생성될 때 만들어지고 페이지가 없어질 때 소멸 되는 객체 (몰라도 됨 ㅎ)

=> ServletConfig config : 서블릿 환경설정 정보
=>PageContext pageContext : jsp페이지 내에서 사용할 수 있는 데이터 저장 기능을 소유할 객체
=>Throwable exception : 예외 발생 시 예외 내용을 가지고 있는 객체

2)서버측 요청 흐름 제어
=>forward  : 현재 요청을 종료시키지 않고 이어나가는 흐름
request와 session 그리고 application 객체 모두 유지가 됨
url이 변경되지 않음
읽기 작업에서 결과 페이지로 이동시킬 때 주로 이용

=>redirect : 현재 요청을 종료하고 새로운 흐름을 만드는 것
request객체는 새로 만들어지고 session 그리고 application 객체 모두 유지가 됨
url이 변경됨
삽입, 삭제, 갱신 작업을 수행 시 주로 하지만 트래픽 제어를 위해서 읽기 작업에서 사용하는 경우도 있음

spa (single page application) - angular, react, vue -> ajax에 특화

8. cookie와 session
=>http와 https는 연결을 유지하지 않음
상태 보존도 하지 않음
요청을 해서 응답을 하고 나면 연결이 종료됨

1)cookie
클라이언트에 상태를 보존하는 기술
서버에게 요청을 보낼 때마다 같이 전송 됨
보안때문에 잘 사용하지 않는다고 했지만 보안이 중요하지 않은 데이터는 요즘도 쿠키를 많이 이용
=>최근에는 쿠키 대산에 브라우저의 저장소(web storage, web sql, indexed db)에 저장하는 것도 권장, localstorage-내 브라우저에만 저장됨
web sql : sqlite (내부에서만 접속 가능, 외부 접속 불가), indexed db iot

2. session
=>서버에 상태를 보존하는 기술
=>하나의 클라이언트가 서버에 접속할 때 생성되고 클라이언트가 접속을 해제할 때 소멸됨
=>여러 클라이엍으를 처리하는 시스템에서는 메모리 세션보다는 파일이나 데이터베이스 세션을 이용하는 것을 권장함
=>최근에는 web socket과 로컬스토리지를 이용하는 방식으로 구현하기도 함

9. el과 jstl
1)el
=>expression language 로 자바의 데이터를 jsp에서 출력하도록 해주는 표현언어
=>model2 방식에서는 자바코드를 jsp에 직접 사용하는것을 금기시 하기 때문에 데이터 출력을 할 때 el을 이용해서 출력

2)jstl(jsp standard tag library)
=>apache 그룹에서 jsp에서 많이 사용할 만한 자바의 기능을 xml태그 형태로 만들어서 제공해주는 라이브러리

3)spring에서는 tymeleaf나 velocity 등을 이용해서 출력하거나 데이터만 출력하기 때문에 사용빈도가 높지는 않음

10. filter와 listener
1)filter
=>요청을 처리하기 전이나 처리한 후에 수행할 내용을 작성할 수 있는 인터페이스
=>AoP(Aspect of Programming) : 관점지향 프로그래밍
Common concern(공통관심사항 - 프로그래머가 혼자서도 작업이 가능한 영역)과 ex 로그 저장(원격 업무 가능)
business logic(실제 서비스 로직으로 프로그래머 혼자서는 작업이 불가능한 영역)의 분리 - ex 대한항공 티켓 예매

2)listener
=>이벤트가 발생 시 호출되는 객체를 위한 인터페이스
=>java web에서는 we application이 시작하거나 종료할 때 그리고 세션이 만들어지고 소멸될 때 호출되는 listener 인터페이스를 제공

로그아웃 안하고 x버튼으로 종료 할 시 버튼에 자바스크립트 before unload 이벤트 걸어서 로그아웃 기능 넣어줘야 함..

11. 데이터베이스 연동 방식
1)순수 jdbc 코드로 연동
=>데이터베이스 제조사에서 제공하는 api를 직접 이용

2) sql Mapper 이용
=> sql 을 별도의 파일이나 인터페이스에 작성하고 이를 불러들이는 방식으로 MyBatis(구 iBatis)가 대표적
=> 구현은 쉽지만 효율이 떨어지고 유지보수도 어려움
=>si 업계에서 많이 이용

3) orm 이용
=>하나의 클래스와 테이블을 매핑시켜서 sql 없이도 데이터베이스 작업이 가능
하도록 해주는 방식으로 jpa가 대표적인데 jpa는 인터페이스 이름이고 실제 구현체는 hibernate를 많이 이용
=>구현이 어렵지만 효율이 좋고 유지보수도 편리
=>최근 중견 기업에서는 대부분 이 방식을 사용하며 다른언어에서도 이 방식의 프레임워크를 사용하는 경우가 많음
인프런 orm 강의 (jpa)

12. 로그인 방식의 변화
=>예전에는 아이디와 비밀번호를 입력하는 구조를 많이 이용했는데 최근에는 아이디와 비밀번호를 이용해 토큰을 발급하고 그 토큰을 이용하는 방식으로 변화

13. eclipse 프로젝트 깃허브 업로드
1)access 토큰 발급받기 - 맨 처음 한번만 하면 다시 할 필요 없음
=>git personal access tokens 선택
generate new token 클릭하고 설명과 권한을 선택 후 generate new token 클릭 시 토큰이 만들어지고 번호가 보이는데 
이 번호는 한번만 출력되므로 복사해두고 사용
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

2)깃허브에서 repository를 생성
=>eclipse에서 작업한 프로젝트를 업로드 시 repository를 먼저 만들고 하지만
다른 ide는 업로드 시 repository가 만들어지기도 함
https://github.com/KimSoobin32/tjoeunjavaweb.git

3)이클립스에서 repository를 등록
=> window - show view - others - git- git repositories 를 선택
clone a git repositories를 선택하고 url주소 복붙.. (로그인 안해도 됨)

4)이클립스 프로젝트에 repository 연결
프로젝트 선택 후 우클릭 - team - share project - repository 선택

5)용어
=>commit : 변경된 내용을 로컬 git에 적용
=>push : 커밋된 내용을 서버 (원격 git)에 적용
branch : 현재 저장소 안에 새로운 스냅샷을 만드는 것
fetch, pull : 변경된 내용을 현재 프로젝트에 적용
merge : 브랜치를 원본에 반영

6)업로드
프로젝트 우클릭 commit 선택 후 업로드할 파일을 아래창으로 이동 후 메시지 작성 후 
commit and push 클릭 후 아이디와 토큰 번호 입력(비밀번호 아님)

https://github.com/itggangpae